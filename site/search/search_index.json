{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Scurid Docs Scurid platform offers API first approach to simplify development and deployment of IoT device's identity and its data security at global scale.","title":"Home"},{"location":"#scurid-docs","text":"Scurid platform offers API first approach to simplify development and deployment of IoT device's identity and its data security at global scale.","title":"Scurid Docs"},{"location":"edgeAgent/","text":"Scurid Edge Agent","title":"Scurid Edge Agent"},{"location":"edgeAgent/#scurid-edge-agent","text":"","title":"Scurid Edge Agent"},{"location":"glossary/","text":"Cryptography terms Terms Description Hashing TODO: what is hashing Distributed Identity terms Terms Description DID Web3.0 enabled digital identity framework. Scurid terms Terms Description Scurid Edge Agent TODO: what is it","title":"Glossary"},{"location":"glossary/#cryptography-terms","text":"Terms Description Hashing TODO: what is hashing","title":"Cryptography terms"},{"location":"glossary/#distributed-identity-terms","text":"Terms Description DID Web3.0 enabled digital identity framework.","title":"Distributed Identity terms"},{"location":"glossary/#scurid-terms","text":"Terms Description Scurid Edge Agent TODO: what is it","title":"Scurid terms"},{"location":"quickstart/","text":"Quickstart This page covers how to get started with Scurid Platform by downloading and setting up software elements to on required IoT hardware and the dashboard to manage it Step 1 : Download and setup Scurid App & Backend server Pre-requisite for Scurid App Ensure that the user running the application has sufficient rights to execute the application, you may have to make the app executable on linux for that run linux sudo chmod +x scurid_flutter Ensure the downloaded zip contains data , lib , Scurid_App For linux run linux sudo apt-get install libgtk-3-0 libblkid1 liblzma5 Scurid Platform app, is divided into two parts a. Scurid App, which is a desktop native application for ID management, configuration & analytics. Download for your platform : here b. Scurid Backend, is a server supporting the App functionalities and managing the communication with all the agents deployed in your IoT Ecosystem. Can be deployed on On-Premise or Managed On-Premise Managed Download the binary for your platform from here Open a terminal and execute the binary linux macos windows ./service-beta-vX.X.X-linux ./service-beta-vX.X.X-darwin ./service-beta-vX.X.X-win64 Contact us to setup an instance for you. Step 2 : User On-boarding This steps sets up the server and certain configurations that are needed in order to complete the user on-boarding process. Launch the Scurid App, downloaded in Step 1 Setup the local storage area for the app, Select available permissioned distributed ledger supported by Scurid, currently only Ethereum Clique is supported Select the user type Complete the form and continue, this may take a few seconds to finish. This will set up your account with our services esp. Scurid SSI service using the public/private key which is automatically setup for you by the Scurid backend. This public/private key will be used for authenticating your account with us. Once completed, navigate to the home page with Direct connectors This allows complete overview on the agents that are deployed in your network and the identities created using those identities That's it. You are now ready to start deploying agents and start creating new identities using them. Step 3 : Deploying Scurid Edge Agent on your IoT hardware Agent is a single binary, which can be easily configured to run as a service, on desired platform. It is a fully self-contained binary requiring no additional elements. If you are downloading the agent for the first time on linux or related platform you may need to make the binary executable using sudo chmod +x scuridedgeagent-linux-arm7 Note: It must be ensured that you have downloaded the correct binary for your platform. Execute the binary, ensure that the terminal is not closed ./scuridedgeagent-linux-xxx If you do require to close the terminal you can run the service in the background and then disown , e.g. ./scuridedgeagent-linux-arm7 & disown The agent by default prints out some of the default configurations like the port details etc., additionally the agent starts listening on localhost","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"This page covers how to get started with Scurid Platform by downloading and setting up software elements to on required IoT hardware and the dashboard to manage it","title":"Quickstart"},{"location":"quickstart/#step-1-download-and-setup-scurid-app-backend-server","text":"","title":"Step 1 : Download and setup Scurid App &amp; Backend server"},{"location":"quickstart/#pre-requisite-for-scurid-app","text":"Ensure that the user running the application has sufficient rights to execute the application, you may have to make the app executable on linux for that run linux sudo chmod +x scurid_flutter Ensure the downloaded zip contains data , lib , Scurid_App For linux run linux sudo apt-get install libgtk-3-0 libblkid1 liblzma5","title":"Pre-requisite for Scurid App"},{"location":"quickstart/#scurid-platform-app-is-divided-into-two-parts","text":"a. Scurid App, which is a desktop native application for ID management, configuration & analytics. Download for your platform : here b. Scurid Backend, is a server supporting the App functionalities and managing the communication with all the agents deployed in your IoT Ecosystem. Can be deployed on On-Premise or Managed On-Premise Managed Download the binary for your platform from here Open a terminal and execute the binary linux macos windows ./service-beta-vX.X.X-linux ./service-beta-vX.X.X-darwin ./service-beta-vX.X.X-win64 Contact us to setup an instance for you.","title":"Scurid Platform app, is divided into two parts"},{"location":"quickstart/#step-2-user-on-boarding","text":"This steps sets up the server and certain configurations that are needed in order to complete the user on-boarding process. Launch the Scurid App, downloaded in Step 1 Setup the local storage area for the app, Select available permissioned distributed ledger supported by Scurid, currently only Ethereum Clique is supported Select the user type Complete the form and continue, this may take a few seconds to finish. This will set up your account with our services esp. Scurid SSI service using the public/private key which is automatically setup for you by the Scurid backend. This public/private key will be used for authenticating your account with us. Once completed, navigate to the home page with Direct connectors This allows complete overview on the agents that are deployed in your network and the identities created using those identities That's it. You are now ready to start deploying agents and start creating new identities using them.","title":"Step 2 : User On-boarding"},{"location":"quickstart/#step-3-deploying-scurid-edge-agent-on-your-iot-hardware","text":"Agent is a single binary, which can be easily configured to run as a service, on desired platform. It is a fully self-contained binary requiring no additional elements. If you are downloading the agent for the first time on linux or related platform you may need to make the binary executable using sudo chmod +x scuridedgeagent-linux-arm7 Note: It must be ensured that you have downloaded the correct binary for your platform. Execute the binary, ensure that the terminal is not closed ./scuridedgeagent-linux-xxx If you do require to close the terminal you can run the service in the background and then disown , e.g. ./scuridedgeagent-linux-arm7 & disown The agent by default prints out some of the default configurations like the port details etc., additionally the agent starts listening on localhost","title":"Step 3 : Deploying Scurid Edge Agent on your IoT hardware"},{"location":"zero-trusttotrustedIdentityforyourIoTDevice/","text":"This tutorial provides a simplified overview on generating, approving device identity with APIs, and approving it using Scurid Platform App. Step 1. Generate an identity Edge agent is required to run directly on the device, and it exposes gRPC based APIs for your IoT software to interact with. In order to register and monitor the identities generated by each agent you must tell the agent where the Scurid backend is running. Depending on where the Scurid backend is deployed you'll need to pass the address On-Premise Managed If Scurid backed deployed and managed in your infrastructure. linux macos windows ./scuridedgeagent-xxx-xxx --spaaddr my-server-address:443 ./scuridedgeagent-xxx-xxx --spaaddr my-server-address:443 ./scuridedgeagent-xxx-xxx --spaaddr my-server-address:443 If Scurid backed deployed and managed by Scurid for you. linux macos windows ./scuridedgeagent-xxx-xxx --spaaddr managed-demo.scurid.cloud:50050 ./scuridedgeagent-xxx-xxx --spaaddr managed-demo.scurid.cloud:50050 ./scuridedgeagent-xxx-xxx --spaaddr managed-demo.scurid.cloud:50050 Agent exposes a set of local gRPC APIs. That can be compiled in over 10 languages. The following are some examples in different programing languages Go Python Javascript c := api . NewScuridEdgeAgentAPIClient ( conn ) res , err := c . CreateDeviceIdentity ( context . Background (), & api . CreateDeviceIdentityReq {}) def createidentitydemo (): try : ireq = edgeagent_pb2 . CreateDeviceIdentityReq () req = stub . CreateDeviceIdentity ( ireq ) except grpc . RpcError as e : print ( f 'failed setting: { e . details } ' ) else : print ( req ) ( async function () { const response = await GRPCService . runService ( 'CreateDeviceIdentity' ); console . log ( `CreateDeviceIdentity:response=` , response ); })(); Identity generation produces following public key e.g. did:scurid:0xe8051e21cBaD5E4BdcaA86D20d06DF2667E098b0 , uniquely identifying the device for a context. Step 2. Send identity registration request RegisterDeviceIdentity API enables your device IoT software to send new identity, generated in step above, to the Scurid backend server Go Python Javascript c := api . NewScuridEdgeAgentAPIClient ( conn ) res , err := c . RegisterDeviceIdentity ( context . Background (), & api . RegisterDeviceIdentityReq { Did : \"did:scurid:0xe8051e21cBaD5E4BdcaA86D20d06DF2667E098b0\" , UnixTime : time . Now (). Unix (), DeviceName : \"rasp4-demo-id\" , DeviceContext : nil , }) Example coming soon! const GRPCService = require ( './lib/grpc-service' ); const moment = require ( 'moment' ); const CREATE_INDENTITY_RESPONSE = { did : 'did:scurid:0xe8051e21cBaD5E4BdcaA86D20d06DF2667E098b0' }; const DEVICE_NAME = 'rasp4-demo-id' ; ( async function () { const response = await GRPCService . runService ( 'RegisterDeviceIdentity' , { did : CREATE_INDENTITY_RESPONSE . did , unixTime : moment (). unix () * 1000 , deviceName : DEVICE_NAME , deviceContext : {} }); console . log ( `RegisterDeviceIdentity:response=` , response ); })(); Step 3. Review pending identity Navigate to the Scurid App's Identities > Pending list to review the pending identities Select the pending identity for the approval Notice you can review the device context attached to the identity, click Allow Once approved this identity can be viewed in the approved list Device context, recorded together with the identity, is hashed and bound with each identity serving as identity's genesis information.","title":"Zero-trust to trusted Device Identity"},{"location":"zero-trusttotrustedIdentityforyourIoTDevice/#step-1-generate-an-identity","text":"Edge agent is required to run directly on the device, and it exposes gRPC based APIs for your IoT software to interact with. In order to register and monitor the identities generated by each agent you must tell the agent where the Scurid backend is running. Depending on where the Scurid backend is deployed you'll need to pass the address On-Premise Managed If Scurid backed deployed and managed in your infrastructure. linux macos windows ./scuridedgeagent-xxx-xxx --spaaddr my-server-address:443 ./scuridedgeagent-xxx-xxx --spaaddr my-server-address:443 ./scuridedgeagent-xxx-xxx --spaaddr my-server-address:443 If Scurid backed deployed and managed by Scurid for you. linux macos windows ./scuridedgeagent-xxx-xxx --spaaddr managed-demo.scurid.cloud:50050 ./scuridedgeagent-xxx-xxx --spaaddr managed-demo.scurid.cloud:50050 ./scuridedgeagent-xxx-xxx --spaaddr managed-demo.scurid.cloud:50050 Agent exposes a set of local gRPC APIs. That can be compiled in over 10 languages. The following are some examples in different programing languages Go Python Javascript c := api . NewScuridEdgeAgentAPIClient ( conn ) res , err := c . CreateDeviceIdentity ( context . Background (), & api . CreateDeviceIdentityReq {}) def createidentitydemo (): try : ireq = edgeagent_pb2 . CreateDeviceIdentityReq () req = stub . CreateDeviceIdentity ( ireq ) except grpc . RpcError as e : print ( f 'failed setting: { e . details } ' ) else : print ( req ) ( async function () { const response = await GRPCService . runService ( 'CreateDeviceIdentity' ); console . log ( `CreateDeviceIdentity:response=` , response ); })(); Identity generation produces following public key e.g. did:scurid:0xe8051e21cBaD5E4BdcaA86D20d06DF2667E098b0 , uniquely identifying the device for a context.","title":"Step 1. Generate an identity"},{"location":"zero-trusttotrustedIdentityforyourIoTDevice/#step-2-send-identity-registration-request","text":"RegisterDeviceIdentity API enables your device IoT software to send new identity, generated in step above, to the Scurid backend server Go Python Javascript c := api . NewScuridEdgeAgentAPIClient ( conn ) res , err := c . RegisterDeviceIdentity ( context . Background (), & api . RegisterDeviceIdentityReq { Did : \"did:scurid:0xe8051e21cBaD5E4BdcaA86D20d06DF2667E098b0\" , UnixTime : time . Now (). Unix (), DeviceName : \"rasp4-demo-id\" , DeviceContext : nil , }) Example coming soon! const GRPCService = require ( './lib/grpc-service' ); const moment = require ( 'moment' ); const CREATE_INDENTITY_RESPONSE = { did : 'did:scurid:0xe8051e21cBaD5E4BdcaA86D20d06DF2667E098b0' }; const DEVICE_NAME = 'rasp4-demo-id' ; ( async function () { const response = await GRPCService . runService ( 'RegisterDeviceIdentity' , { did : CREATE_INDENTITY_RESPONSE . did , unixTime : moment (). unix () * 1000 , deviceName : DEVICE_NAME , deviceContext : {} }); console . log ( `RegisterDeviceIdentity:response=` , response ); })();","title":"Step 2. Send identity registration request"},{"location":"zero-trusttotrustedIdentityforyourIoTDevice/#step-3-review-pending-identity","text":"Navigate to the Scurid App's Identities > Pending list to review the pending identities Select the pending identity for the approval Notice you can review the device context attached to the identity, click Allow Once approved this identity can be viewed in the approved list Device context, recorded together with the identity, is hashed and bound with each identity serving as identity's genesis information.","title":"Step 3. Review pending identity"}]}